generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                  @id @default(cuid())
  name                  String
  username              String                  @unique
  passwordHash          String
  email                 String                  @unique
  emailVerified         Boolean                 @default(false)
  sessions              Session[]
  tickets               Ticket[]
  comments              Comment[]
  PasswordResetToken    PasswordResetToken[]
  emailVerificationCode EmailVerificationCode[]
}

model Session {
  id        String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime

  @@index([userId])
}

model Ticket {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String
  content      String
  status       TicketStatus  @default(OPEN)
  bounty       Int
  deadline     String
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments     Comment[]
  attachements Attachments[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?

  @@index([userId])
  @@index([ticketId])
}

model PasswordResetToken {
  tokenHash String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  code      String
  email     String

  @@index([userId])
}

model Attachments {
  id       String @id @default(cuid())
  name     String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String

  @@index([ticketId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}
